	static int minimax(board lay,int depth,boolean isMax)
	{
		Map< Integer,Integer> tally = new HashMap< Integer,Integer>(); 
		tally.put(1, -1);
		tally.put(2, 1);
		tally.put(0, 0);
		int result=isEnd(lay);
		//System.out.println(result);
		if(result!=69)
		{
				return tally.get(result);
		}
		if(isMax)
		{
			int topScore=-100;
			for(int i=1;i<=9;i++)
			{
				//AI turn
				if(lay.getLayout(i)==0)
				{
					lay.setLayout(i, 2);
					int score=minimax(lay,depth+1,false);
					lay.setLayout(i, 0);
					if(score>topScore)
						{
						
						topScore=score;
						System.out.println("Max:"+topScore+"index:"+i);
						}
				}
			}
			return topScore;
		}
		else
		{
			int topScore=100;
			for(int i=1;i<=9;i++)
			{
				//human turn
				if(lay.getLayout(i)==0)
				{
					lay.setLayout(i, 1);
					int score=minimax(lay,depth+1,true);
					lay.setLayout(i, 0);
					if(score<topScore)
						{
						
						topScore=score;
						System.out.println("Min:"+topScore+"index:"+i);
						}
				}
			}
			return topScore;
		}
	
	}
	
	static void startAi(board lay)
	{
		
		int bestMove =0;
		int topScore=-100;
		
		for(int i=1;i<=9;i++)
		{
			
			//minimax calling
			if(lay.getLayout(i)==0)
			{
				lay.setLayout(i, 2);
				int score=minimax(lay,0,false);
				lay.setLayout(i, 0);
				if(score>topScore)
					{
					topScore=score;
					System.out.println("Final:"+topScore+"index:"+i);
					bestMove=i;
					}
			}
		}
		lay.setLayout(bestMove, 2);
	}
		
	
